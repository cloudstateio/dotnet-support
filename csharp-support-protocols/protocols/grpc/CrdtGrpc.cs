// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cloudstate/crdt.proto
// </auto-generated>
// Original file comments:
// Copyright 2019 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// gRPC interface for Event Sourced Entity user functions.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Cloudstate.Crdt {
  /// <summary>
  /// CRDT Protocol
  ///
  /// Note that while this protocol provides support for CRDTs, the data types sent across the protocol are not CRDTs
  /// themselves. It is the responsibility of the CloudState proxy to implement the CRDTs, merge functions, vector clocks
  /// etc, not the user function. The user function need only hold the current value in memory, and this protocol sends
  /// deltas to the user function to update its in memory value as necessary. These deltas have no way of dealing with
  /// conflicts, hence it important that the CloudState proxy always know what the state of the user functions in memory
  /// value is before sending a delta. If the CloudState proxy is not sure what the value is, eg because it has just sent
  /// an operation to the user function may have updated its value as a result, the proxy should wait until it gets the
  /// result of the operation back, to ensure its in memory value is in sync with the user function so that it can
  /// calculate deltas that won't conflict.
  ///
  /// The user function is expected to update its value both as the result of receiving deltas from the proxy, as well as
  /// when it sends deltas. It must not update its value in any other circumstance, updating the value in response to any
  /// other stimuli risks the value becoming out of sync with the CloudState proxy. The user function will not be sent
  /// back deltas as a result of its own changes.
  ///
  /// An invocation of handle is made for each entity being handled. It may be kept alive and used to handle multiple
  /// commands, and may subsequently be terminated if that entity becomes idle, or if the entity is deleted. Shutdown is
  /// typically done for efficiency reasons, unless the entity is explicitly deleted, a terminated handle stream does not
  /// mean the proxy has stopped tracking the state of the entity in its memory.
  ///
  /// Special care must be taken when working with maps and sets. The keys/values are google.protobuf.Any, which encodes
  /// the value as binary protobuf, however, serialized protobufs are not stable, two semantically equal objects could
  /// encode to different bytes. It is the responsibility of the user function to ensure that stable encodings are used.
  /// </summary>
  public static partial class Crdt
  {
    static readonly string __ServiceName = "cloudstate.crdt.Crdt";

    static readonly grpc::Marshaller<global::Cloudstate.Crdt.CrdtStreamIn> __Marshaller_cloudstate_crdt_CrdtStreamIn = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cloudstate.Crdt.CrdtStreamIn.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Cloudstate.Crdt.CrdtStreamOut> __Marshaller_cloudstate_crdt_CrdtStreamOut = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cloudstate.Crdt.CrdtStreamOut.Parser.ParseFrom);

    static readonly grpc::Method<global::Cloudstate.Crdt.CrdtStreamIn, global::Cloudstate.Crdt.CrdtStreamOut> __Method_handle = new grpc::Method<global::Cloudstate.Crdt.CrdtStreamIn, global::Cloudstate.Crdt.CrdtStreamOut>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "handle",
        __Marshaller_cloudstate_crdt_CrdtStreamIn,
        __Marshaller_cloudstate_crdt_CrdtStreamOut);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cloudstate.Crdt.CrdtReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Crdt</summary>
    [grpc::BindServiceMethod(typeof(Crdt), "BindService")]
    public abstract partial class CrdtBase
    {
      /// <summary>
      /// After invoking handle, the first message sent will always be a CrdtInit message, containing the entity ID, and,
      /// if it exists or is available, the current state of the entity. After that, one or more commands may be sent,
      /// as well as deltas as they arrive, and the entire state if either the entity is created, or the proxy wishes the
      /// user function to replace its entire state.
      ///
      /// The user function must respond with one reply per command in. They do not necessarily have to be sent in the same
      /// order that the commands were sent, the command ID is used to correlate commands to replies.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task handle(grpc::IAsyncStreamReader<global::Cloudstate.Crdt.CrdtStreamIn> requestStream, grpc::IServerStreamWriter<global::Cloudstate.Crdt.CrdtStreamOut> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Crdt</summary>
    public partial class CrdtClient : grpc::ClientBase<CrdtClient>
    {
      /// <summary>Creates a new client for Crdt</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CrdtClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Crdt that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CrdtClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CrdtClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CrdtClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// After invoking handle, the first message sent will always be a CrdtInit message, containing the entity ID, and,
      /// if it exists or is available, the current state of the entity. After that, one or more commands may be sent,
      /// as well as deltas as they arrive, and the entire state if either the entity is created, or the proxy wishes the
      /// user function to replace its entire state.
      ///
      /// The user function must respond with one reply per command in. They do not necessarily have to be sent in the same
      /// order that the commands were sent, the command ID is used to correlate commands to replies.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Cloudstate.Crdt.CrdtStreamIn, global::Cloudstate.Crdt.CrdtStreamOut> handle(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return handle(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// After invoking handle, the first message sent will always be a CrdtInit message, containing the entity ID, and,
      /// if it exists or is available, the current state of the entity. After that, one or more commands may be sent,
      /// as well as deltas as they arrive, and the entire state if either the entity is created, or the proxy wishes the
      /// user function to replace its entire state.
      ///
      /// The user function must respond with one reply per command in. They do not necessarily have to be sent in the same
      /// order that the commands were sent, the command ID is used to correlate commands to replies.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Cloudstate.Crdt.CrdtStreamIn, global::Cloudstate.Crdt.CrdtStreamOut> handle(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_handle, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CrdtClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CrdtClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CrdtBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_handle, serviceImpl.handle).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CrdtBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_handle, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Cloudstate.Crdt.CrdtStreamIn, global::Cloudstate.Crdt.CrdtStreamOut>(serviceImpl.handle));
    }

  }
}
#endregion
