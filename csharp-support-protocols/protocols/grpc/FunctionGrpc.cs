// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cloudstate/function.proto
// </auto-generated>
// Original file comments:
// Copyright 2019 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// gRPC interface for Event Sourced Entity user functions.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Cloudstate.Function {
  public static partial class StatelessFunction
  {
    static readonly string __ServiceName = "cloudstate.function.StatelessFunction";

    static readonly grpc::Marshaller<global::Cloudstate.Function.FunctionCommand> __Marshaller_cloudstate_function_FunctionCommand = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cloudstate.Function.FunctionCommand.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Cloudstate.Function.FunctionReply> __Marshaller_cloudstate_function_FunctionReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cloudstate.Function.FunctionReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply> __Method_handleUnary = new grpc::Method<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "handleUnary",
        __Marshaller_cloudstate_function_FunctionCommand,
        __Marshaller_cloudstate_function_FunctionReply);

    static readonly grpc::Method<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply> __Method_handleStreamedIn = new grpc::Method<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "handleStreamedIn",
        __Marshaller_cloudstate_function_FunctionCommand,
        __Marshaller_cloudstate_function_FunctionReply);

    static readonly grpc::Method<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply> __Method_handleStreamedOut = new grpc::Method<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "handleStreamedOut",
        __Marshaller_cloudstate_function_FunctionCommand,
        __Marshaller_cloudstate_function_FunctionReply);

    static readonly grpc::Method<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply> __Method_handleStreamed = new grpc::Method<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "handleStreamed",
        __Marshaller_cloudstate_function_FunctionCommand,
        __Marshaller_cloudstate_function_FunctionReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cloudstate.Function.FunctionReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of StatelessFunction</summary>
    [grpc::BindServiceMethod(typeof(StatelessFunction), "BindService")]
    public abstract partial class StatelessFunctionBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Cloudstate.Function.FunctionReply> handleUnary(global::Cloudstate.Function.FunctionCommand request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Cloudstate.Function.FunctionReply> handleStreamedIn(grpc::IAsyncStreamReader<global::Cloudstate.Function.FunctionCommand> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task handleStreamedOut(global::Cloudstate.Function.FunctionCommand request, grpc::IServerStreamWriter<global::Cloudstate.Function.FunctionReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task handleStreamed(grpc::IAsyncStreamReader<global::Cloudstate.Function.FunctionCommand> requestStream, grpc::IServerStreamWriter<global::Cloudstate.Function.FunctionReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for StatelessFunction</summary>
    public partial class StatelessFunctionClient : grpc::ClientBase<StatelessFunctionClient>
    {
      /// <summary>Creates a new client for StatelessFunction</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public StatelessFunctionClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for StatelessFunction that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public StatelessFunctionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected StatelessFunctionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected StatelessFunctionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Cloudstate.Function.FunctionReply handleUnary(global::Cloudstate.Function.FunctionCommand request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return handleUnary(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Cloudstate.Function.FunctionReply handleUnary(global::Cloudstate.Function.FunctionCommand request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_handleUnary, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Cloudstate.Function.FunctionReply> handleUnaryAsync(global::Cloudstate.Function.FunctionCommand request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return handleUnaryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Cloudstate.Function.FunctionReply> handleUnaryAsync(global::Cloudstate.Function.FunctionCommand request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_handleUnary, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply> handleStreamedIn(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return handleStreamedIn(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply> handleStreamedIn(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_handleStreamedIn, null, options);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Cloudstate.Function.FunctionReply> handleStreamedOut(global::Cloudstate.Function.FunctionCommand request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return handleStreamedOut(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Cloudstate.Function.FunctionReply> handleStreamedOut(global::Cloudstate.Function.FunctionCommand request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_handleStreamedOut, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply> handleStreamed(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return handleStreamed(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply> handleStreamed(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_handleStreamed, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override StatelessFunctionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StatelessFunctionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(StatelessFunctionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_handleUnary, serviceImpl.handleUnary)
          .AddMethod(__Method_handleStreamedIn, serviceImpl.handleStreamedIn)
          .AddMethod(__Method_handleStreamedOut, serviceImpl.handleStreamedOut)
          .AddMethod(__Method_handleStreamed, serviceImpl.handleStreamed).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StatelessFunctionBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_handleUnary, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply>(serviceImpl.handleUnary));
      serviceBinder.AddMethod(__Method_handleStreamedIn, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply>(serviceImpl.handleStreamedIn));
      serviceBinder.AddMethod(__Method_handleStreamedOut, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply>(serviceImpl.handleStreamedOut));
      serviceBinder.AddMethod(__Method_handleStreamed, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Cloudstate.Function.FunctionCommand, global::Cloudstate.Function.FunctionReply>(serviceImpl.handleStreamed));
    }

  }
}
#endregion
