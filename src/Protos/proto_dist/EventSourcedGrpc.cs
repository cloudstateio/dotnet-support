// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cloudstate/event_sourced.proto
// </auto-generated>
// Original file comments:
// Copyright 2019 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// gRPC interface for Event Sourced Entity user functions.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Cloudstate.Eventsourced {
  /// <summary>
  /// The Entity service
  /// </summary>
  public static partial class EventSourced
  {
    static readonly string __ServiceName = "cloudstate.eventsourced.EventSourced";

    static readonly grpc::Marshaller<global::Cloudstate.Eventsourced.EventSourcedStreamIn> __Marshaller_cloudstate_eventsourced_EventSourcedStreamIn = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cloudstate.Eventsourced.EventSourcedStreamIn.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Cloudstate.Eventsourced.EventSourcedStreamOut> __Marshaller_cloudstate_eventsourced_EventSourcedStreamOut = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Cloudstate.Eventsourced.EventSourcedStreamOut.Parser.ParseFrom);

    static readonly grpc::Method<global::Cloudstate.Eventsourced.EventSourcedStreamIn, global::Cloudstate.Eventsourced.EventSourcedStreamOut> __Method_handle = new grpc::Method<global::Cloudstate.Eventsourced.EventSourcedStreamIn, global::Cloudstate.Eventsourced.EventSourcedStreamOut>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "handle",
        __Marshaller_cloudstate_eventsourced_EventSourcedStreamIn,
        __Marshaller_cloudstate_eventsourced_EventSourcedStreamOut);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cloudstate.Eventsourced.EventSourcedReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of EventSourced</summary>
    [grpc::BindServiceMethod(typeof(EventSourced), "BindService")]
    public abstract partial class EventSourcedBase
    {
      /// <summary>
      /// The stream. One stream will be established per active entity.
      /// Once established, the first message sent will be Init, which contains the entity ID, and,
      /// if the entity has previously persisted a snapshot, it will contain that snapshot. It will
      /// then send zero to many event messages, one for each event previously persisted. The entity
      /// is expected to apply these to its state in a deterministic fashion. Once all the events
      /// are sent, one to many commands are sent, with new commands being sent as new requests for
      /// the entity come in. The entity is expected to reply to each command with exactly one reply
      /// message. The entity should reply in order, and any events that the entity requests to be
      /// persisted the entity should handle itself, applying them to its own state, as if they had
      /// arrived as events when the event stream was being replayed on load.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task handle(grpc::IAsyncStreamReader<global::Cloudstate.Eventsourced.EventSourcedStreamIn> requestStream, grpc::IServerStreamWriter<global::Cloudstate.Eventsourced.EventSourcedStreamOut> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for EventSourced</summary>
    public partial class EventSourcedClient : grpc::ClientBase<EventSourcedClient>
    {
      /// <summary>Creates a new client for EventSourced</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public EventSourcedClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for EventSourced that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public EventSourcedClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected EventSourcedClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected EventSourcedClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// The stream. One stream will be established per active entity.
      /// Once established, the first message sent will be Init, which contains the entity ID, and,
      /// if the entity has previously persisted a snapshot, it will contain that snapshot. It will
      /// then send zero to many event messages, one for each event previously persisted. The entity
      /// is expected to apply these to its state in a deterministic fashion. Once all the events
      /// are sent, one to many commands are sent, with new commands being sent as new requests for
      /// the entity come in. The entity is expected to reply to each command with exactly one reply
      /// message. The entity should reply in order, and any events that the entity requests to be
      /// persisted the entity should handle itself, applying them to its own state, as if they had
      /// arrived as events when the event stream was being replayed on load.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Cloudstate.Eventsourced.EventSourcedStreamIn, global::Cloudstate.Eventsourced.EventSourcedStreamOut> handle(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return handle(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// The stream. One stream will be established per active entity.
      /// Once established, the first message sent will be Init, which contains the entity ID, and,
      /// if the entity has previously persisted a snapshot, it will contain that snapshot. It will
      /// then send zero to many event messages, one for each event previously persisted. The entity
      /// is expected to apply these to its state in a deterministic fashion. Once all the events
      /// are sent, one to many commands are sent, with new commands being sent as new requests for
      /// the entity come in. The entity is expected to reply to each command with exactly one reply
      /// message. The entity should reply in order, and any events that the entity requests to be
      /// persisted the entity should handle itself, applying them to its own state, as if they had
      /// arrived as events when the event stream was being replayed on load.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Cloudstate.Eventsourced.EventSourcedStreamIn, global::Cloudstate.Eventsourced.EventSourcedStreamOut> handle(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_handle, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override EventSourcedClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EventSourcedClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(EventSourcedBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_handle, serviceImpl.handle).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, EventSourcedBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_handle, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Cloudstate.Eventsourced.EventSourcedStreamIn, global::Cloudstate.Eventsourced.EventSourcedStreamOut>(serviceImpl.handle));
    }

  }
}
#endregion
